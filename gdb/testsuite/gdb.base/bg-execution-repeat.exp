# Copyright (C) 2014-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that repeating a background command doesn't lose the "&" in the
# repeat, turning a background command into a foreground command.  See
# PR gdb/17471.

standard_testfile

if { [build_executable "failed to prepare" ${testfile} $srcfile] } {
    return -1
}

# Run the test proper.  CONTINUE_CMD is the background continue
# command to issue.

proc test {continue_cmd} {
    global gdb_prompt
    global binfile

    clean_restart $binfile

    if ![runto_main] {
	return
    }

    gdb_test $continue_cmd

    set re_interrupt \
	[multi_line \
	     [string_to_regexp "Program received signal SIGINT, Interrupt."] \
	     "\[^\r\n\]+ (in|at) \[^\r\n\]+"]

    set seen_prompt 0
    gdb_test_multiple "server interrupt" "" {
	-re "$gdb_prompt " {
	    set seen_prompt 1
	    exp_continue
	}
	-re $re_interrupt {
	    gdb_assert $seen_prompt $gdb_test_name
	}
    }

    # Trigger a repeat.  Buggy GDB used to lose the "&", making this a
    # foreground command...
    send_gdb "\n"
    gdb_test "" "Continuing\\." "repeat bg command"

    # ... and thus further input wouldn't be processed until the target
    # stopped.
    gdb_test "print 1" " = 1" "input still accepted"

    set seen_prompt 0
    gdb_test_multiple "interrupt" "" {
	-re "$gdb_prompt " {
	    set seen_prompt 1
	    exp_continue
	}
	-re $re_interrupt {
	    gdb_assert $seen_prompt $gdb_test_name
	}
    }
}

# Test with and without extra arguments.
foreach cmd {"c&" "c 1&"} {
    with_test_prefix $cmd {
	test $cmd
    }
}
