# Copyright 2021 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test line number information in various configurations.

load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
require dwarf2_support 1

standard_testfile .c -dw.S

# Helper function.
proc line_for { l } {
    global srcfile
    set line [gdb_get_line_number "$l:" $srcfile]
    return [expr $line + 1]
}

# Execute test.
proc test_1 { _cv _lv _dw64 } {
    global srcfile srcfile2 testfile
    global cv lv dw64
    set cv $_cv
    set lv $_lv
    set dw64 $_dw64

    set asm_file [standard_output_file $srcfile2]
    Dwarf::assemble $asm_file {
	declare_labels Llines
	global srcdir subdir srcfile cv lv dw64

	cu { version $cv is_64 $dw64 } {
	    compile_unit {
		{language @DW_LANG_C}
		{name $srcfile}
		{stmt_list $Llines DW_FORM_sec_offset}
	    } {
		subprogram {
		    {external 1 flag}
		    {MACRO_AT_func {main}}
		}
		subprogram {
		    {external 1 flag}
		    {MACRO_AT_func {bar}}
		}
	    }
	}

	lines [list version $lv is_64 $dw64] Llines {
	    include_dir "${srcdir}/${subdir}"
	    file_name "$srcfile" 1

	    program {
		{DW_LNE_set_address bar_label}
		{line [line_for bar_label]}
		{DW_LNS_copy}

		{DW_LNE_set_address bar_label_2}
		{line [line_for bar_label_2]}
		{DW_LNS_copy}

		{DW_LNE_set_address bar_label_3}
		{line [line_for bar_label_3]}
		{DW_LNS_copy}

		{DW_LNE_set_address bar_label_4}
		{line [line_for bar_label_4]}
		{DW_LNS_copy}

		{DW_LNE_set_address bar_label_5}
		{DW_LNE_end_sequence}
	    }
	}
    }

    if { [prepare_for_testing "failed to prepare" ${testfile} \
	      [list $srcfile $asm_file] {nodebug}] } {
	return -1
    }

    if ![runto_main] {
	return -1
    }

    gdb_breakpoint "bar"
    gdb_continue_to_breakpoint "foo \\(1\\)"

    gdb_test "next" "foo \\(2\\).*" "next to foo (2)"
    gdb_test "next" "foo \\(3\\).*" "next to foo (3)"
    gdb_test "next" "foo \\(4\\).*" "next to foo (4)"
}


# Add unique test prefix.
proc test { cv lv dw64 } {
    with_test_prefix cv=$cv {
	with_test_prefix lv=$lv {
	    with_test_prefix dw=[expr $dw64 ? 64 : 32] {
		test_1 $cv $lv $dw64
	    }
	}
    }
}

set cv_low 2
set cv_high 4

set lv_low 2
set lv_high 4

for { set cv $cv_low } { $cv <= $cv_high } { incr cv } {
    for { set lv $lv_low } { $lv <= $lv_high } { incr lv } {
	# I'm not sure if it makes sense to have a dwarf v2 CU with
	# a dwarf v2 line unit.
	if { $lv > $lv } {
	    continue
	}

	foreach dw64 { 0 1 } {
	    test $cv $lv $dw64
	}
    }
}
